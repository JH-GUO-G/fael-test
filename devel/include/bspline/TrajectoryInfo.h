// Generated by gencpp from file bspline/TrajectoryInfo.msg
// DO NOT EDIT!


#ifndef BSPLINE_MESSAGE_TRAJECTORYINFO_H
#define BSPLINE_MESSAGE_TRAJECTORYINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace bspline
{
template <class ContainerAllocator>
struct TrajectoryInfo_
{
  typedef TrajectoryInfo_<ContainerAllocator> Type;

  TrajectoryInfo_()
    : duration(0.0)
    , start_time()
    , pos_end()
    , pos()
    , vel()
    , acc()
    , start_yaw_()  {
    }
  TrajectoryInfo_(const ContainerAllocator& _alloc)
    : duration(0.0)
    , start_time()
    , pos_end(_alloc)
    , pos(_alloc)
    , vel(_alloc)
    , acc(_alloc)
    , start_yaw_(_alloc)  {
  (void)_alloc;
    }



   typedef double _duration_type;
  _duration_type duration;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_end_type;
  _pos_end_type pos_end;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_type;
  _acc_type acc;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _start_yaw__type;
  _start_yaw__type start_yaw_;





  typedef boost::shared_ptr< ::bspline::TrajectoryInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bspline::TrajectoryInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryInfo_

typedef ::bspline::TrajectoryInfo_<std::allocator<void> > TrajectoryInfo;

typedef boost::shared_ptr< ::bspline::TrajectoryInfo > TrajectoryInfoPtr;
typedef boost::shared_ptr< ::bspline::TrajectoryInfo const> TrajectoryInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bspline::TrajectoryInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bspline::TrajectoryInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bspline::TrajectoryInfo_<ContainerAllocator1> & lhs, const ::bspline::TrajectoryInfo_<ContainerAllocator2> & rhs)
{
  return lhs.duration == rhs.duration &&
    lhs.start_time == rhs.start_time &&
    lhs.pos_end == rhs.pos_end &&
    lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.start_yaw_ == rhs.start_yaw_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bspline::TrajectoryInfo_<ContainerAllocator1> & lhs, const ::bspline::TrajectoryInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bspline

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bspline::TrajectoryInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bspline::TrajectoryInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bspline::TrajectoryInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bspline::TrajectoryInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bspline::TrajectoryInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bspline::TrajectoryInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bspline::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0196503bee48a48bdf71c44f3ed61d6";
  }

  static const char* value(const ::bspline::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0196503bee48a48ULL;
  static const uint64_t static_value2 = 0xbdf71c44f3ed61d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::bspline::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bspline/TrajectoryInfo";
  }

  static const char* value(const ::bspline::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bspline::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 duration\n"
"time start_time\n"
"geometry_msgs/Vector3 pos_end\n"
"geometry_msgs/Vector3 pos\n"
"geometry_msgs/Vector3 vel\n"
"geometry_msgs/Vector3 acc\n"
"geometry_msgs/Vector3 start_yaw_\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::bspline::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bspline::TrajectoryInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.duration);
      stream.next(m.start_time);
      stream.next(m.pos_end);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.start_yaw_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bspline::TrajectoryInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bspline::TrajectoryInfo_<ContainerAllocator>& v)
  {
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "pos_end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_end);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "start_yaw_: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.start_yaw_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BSPLINE_MESSAGE_TRAJECTORYINFO_H
